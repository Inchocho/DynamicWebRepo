Get 방식 

특징
url에 데이터를 포함(헤더에 변수값을 담는다) -> 데이터 조회에 적합 (form data의 name과 value가 주소창에 그대로 노출됨)
바이너리 및 대용량 데이터 전송 불가
요청라인과 헤드필드의 최대 크기
	HTTP 사양에는 제한사항이 없음
	대용량 URL로 인한 문제 발생
	
get 방식을 수행 할 수 있는 방법
1. 웹 브라우저 주소창에 URL을 입력하는 경우
2. 링크를 클릭하는 경우 -> a 태그, location 객체
3. form 태그의 method 값이 get인 경우

get 요청 데이터 전달 방식
(key value 형태) myName(key) value(psu)
http://localhost:8090/JavascriptBasic/formTag9.14/add.jsp?myName=%27psu%27

언제 사용하는가?
특정 상품의 정보를 조회하는 것 처럼 데이터를 상대방에게 보여줘야 하는 경우 적합하다
결과 화면을 보관하거나 공유하고 싶다면 get 방식으로 화면을 구현해야 한다
남들에게 보여주고 싶은가(보여줘도 되는 정보인가)에 따라서 get방식을 사용
예를들어 쇼핑몰에 몇번 무슨무슨 상품같은 정보는 보여주는게 더 좋은데
금융정보같은경우 보여주면 수갑찬다

문제점
보안에 좋지 않다 (form data의 name과 value가 주소창에 그대로 노출됨)

바이너리 데이터를 전송 할 수 없다
데이터 전송의 크기 제약



Post 방식

특징
URL에 데이터가 포함되지 않음 -> 외부 노출 방지
(But url뒤에 쿼리스트링 형태로 데이터를 노출하지 않을 뿐 개발자도구같은 툴로 데이터 전부 확인 가능
보안과는 관련이 없다. Post방식또한 get방식과 마찬가지로 보안솔루션이 반드시 필요함)
메시지 본문(즉 body)에 데이터 포함 -> 실행 결과 공유를 불가함
바이너리 및 대용량 데이터 전송 가능

장점
입력값을 URL에 노출하지 않는다

단점
요청 결과를 공유 할 수 없다